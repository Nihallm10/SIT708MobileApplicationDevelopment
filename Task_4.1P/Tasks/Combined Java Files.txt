// MAINACTIVITY//

package com.example.task_manager_app_41p

import android.annotation.SuppressLint
import android.app.DatePickerDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.view.LayoutInflater
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

import java.util.*

class MainActivity : AppCompatActivity() {
    private lateinit var taskDetailsRecycler: RecyclerView
    private lateinit var addTaskAdapter: AddTaskAdapter
    private val addanewtaskList = ArrayList<Addanewtask>()
    private lateinit var addButton: Button
    private lateinit var database: Database
    private val OVERLAY_PERMISSION_REQUEST_CODE = 123

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        database = Database(this)
        taskDetailsRecycler = findViewById(R.id.all_task_recycler)
        addButton = findViewById(R.id.add_task_button)
        val layoutManager = LinearLayoutManager(applicationContext)
        layoutManager.orientation = RecyclerView.VERTICAL
        taskDetailsRecycler.layoutManager = layoutManager

        addButton.setOnClickListener {
            openAddTaskDialog()
        }

        addTaskAdapter = AddTaskAdapter(applicationContext, addanewtaskList, this)
        taskDetailsRecycler.adapter = addTaskAdapter
        refreshRecyclerView()

        checkOverlayPermission() // Check overlay permission here

        // Sort button setup
        val sortButton = findViewById<Button>(R.id.sort_button)
        sortButton.setOnClickListener {
            sortByDate()
        }
    }

    private fun openAddTaskDialog() {
        val builder = AlertDialog.Builder(this)
        val inflater = LayoutInflater.from(this)
        val view = inflater.inflate(R.layout.add_task_view, null)

        val taskTitle = view.findViewById<EditText>(R.id.add_task_title)
        val taskDescription = view.findViewById<EditText>(R.id.add_task_desc)
        val dueDate = view.findViewById<EditText>(R.id.add_task_date)
        val datePicker = DatePickerDialog(this, { _, year, month, day ->
            // Set selected date to EditText
            val formattedDate = "$day/${month + 1}/$year"
            dueDate.setText(formattedDate)
        }, Calendar.getInstance().get(Calendar.YEAR),
            Calendar.getInstance().get(Calendar.MONTH),
            Calendar.getInstance().get(Calendar.DAY_OF_MONTH))

        dueDate.setOnClickListener {
            datePicker.show()
        }

        builder.setView(view)
            .setTitle("Add Task")
            .setNegativeButton("Cancel") { dialogInterface, _ ->
                dialogInterface.dismiss()
            }
            .setPositiveButton("Insert") { _, _ ->
                val title = taskTitle.text.toString()
                val description = taskDescription.text.toString()
                val date = dueDate.text.toString()

                if (title.isNotEmpty() && description.isNotEmpty() && date.isNotEmpty()) {
                    val isInserted = database.insertData(title, description, date)
                    if (isInserted) {
                        Toast.makeText(this, "Task added successfully", Toast.LENGTH_SHORT).show()
                        refreshRecyclerView()
                    } else {
                        Toast.makeText(this, "Failed to add task", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show()
                }
            }

        builder.create().show()
    }

    @SuppressLint("NotifyDataSetChanged")
    fun refreshRecyclerView() {
        addanewtaskList.clear()

        val cursor = database.getAllTasks()
        cursor?.apply {
            while (moveToNext()) {
                val taskId = getString(getColumnIndex(Database.COLUMN_ID))
                val taskTitle = getString(getColumnIndex(Database.COLUMN_TASK_TITLE))
                val taskDescription = getString(getColumnIndex(Database.COLUMN_TASK_DESCRIPTION))
                val dueDate = getString(getColumnIndex(Database.COLUMN_DUE_DATE))
                addanewtaskList.add(Addanewtask(taskId, taskTitle, taskDescription, dueDate, null))
            }
            close()
        }

        addTaskAdapter.notifyDataSetChanged()
    }

    private fun sortByDate() {
        // Sort the task list by due date
        addanewtaskList.sortBy { it.dueDate }

        // Notify the adapter of the data change
        addTaskAdapter.notifyDataSetChanged()
    }

    private fun checkOverlayPermission() {
        if (!Settings.canDrawOverlays(this)) {
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
            startActivityForResult(intent, OVERLAY_PERMISSION_REQUEST_CODE)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == OVERLAY_PERMISSION_REQUEST_CODE) {
            if (Settings.canDrawOverlays(this)) {
                // Overlay permission granted, perform necessary actions
            } else {
                Toast.makeText(this, "Overlay permission not granted", Toast.LENGTH_SHORT).show()
            }
        }
    }
}


// MAINACTIVITY//

// Database File //

package com.example.task_manager_app_41p

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper

class Database(context: Context?) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {
    companion object {
        const val DATABASE_NAME = "TaskManager.db"
        const val DATABASE_VERSION = 1
        const val TABLE_NAME = "Tasks"
        const val COLUMN_ID = "id"
        const val COLUMN_TASK_TITLE = "task_title"
        const val COLUMN_TASK_DESCRIPTION = "task_description"
        const val COLUMN_DUE_DATE = "due_date"
    }


    override fun onCreate(db: SQLiteDatabase) {
        val createTableQuery = ("CREATE TABLE $TABLE_NAME("
                + "$COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
                + "$COLUMN_TASK_TITLE TEXT,"
                + "$COLUMN_TASK_DESCRIPTION TEXT,"
                + "$COLUMN_DUE_DATE TEXT)")
        db.execSQL(createTableQuery)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS $TABLE_NAME")
        onCreate(db)
    }

    fun insertData(taskTitle: String, taskDescription: String, dueDate: String): Boolean {
        val contentValues = ContentValues()
        contentValues.put(COLUMN_TASK_TITLE, taskTitle)
        contentValues.put(COLUMN_TASK_DESCRIPTION, taskDescription)
        contentValues.put(COLUMN_DUE_DATE, dueDate)
        val db = this.writableDatabase
        val rowId = db.insert(TABLE_NAME, null, contentValues)
        return rowId != -1L
    }

    fun getAllTasks(): Cursor? {
        val db = this.readableDatabase
        return db.rawQuery("SELECT * FROM $TABLE_NAME", null)
    }

    fun deleteTask(taskId: String): Boolean {
        val db = this.writableDatabase
        val rowsAffected = db.delete(TABLE_NAME, "$COLUMN_ID = ?", arrayOf(taskId))
        return rowsAffected > 0
    }

    fun updateTask(taskId: String, taskTitle: String, taskDescription: String, dueDate: String): Boolean {
        val contentValues = ContentValues()
        contentValues.put(COLUMN_TASK_TITLE, taskTitle)
        contentValues.put(COLUMN_TASK_DESCRIPTION, taskDescription)
        contentValues.put(COLUMN_DUE_DATE, dueDate)
        val db = this.writableDatabase
        val rowsAffected = db.update(TABLE_NAME, contentValues, "$COLUMN_ID = ?", arrayOf(taskId))
        return rowsAffected > 0
    }
}



// Database File //

// Add a task file //

package com.example.task_manager_app_41p
import android.widget.Button


class Addanewtask(
    var taskId: String?,
    var taskTitle: String?,
    var taskDescription: String?,
    var dueDate: String?,
    var deleteButton: Button?
) {
    // Specify different names for getter and setter methods using @JvmName
    @JvmName("getCustomTaskId")
    fun getTaskId(): String? {
        return taskId
    }

    @JvmName("setCustomTaskId")
    fun setTaskId(taskId: String?) {
        this.taskId = taskId
    }

    @JvmName("getCustomTaskTitle")
    fun getTaskTitle(): String? {
        return taskTitle
    }

    @JvmName("setCustomTaskTitle")
    fun setTaskTitle(taskTitle: String?) {
        this.taskTitle = taskTitle
    }

    @JvmName("getCustomTaskDescription")
    fun getTaskDescription(): String? {
        return taskDescription
    }

    @JvmName("setCustomTaskDescription")
    fun setTaskDescription(taskDescription: String?) {
        this.taskDescription = taskDescription
    }

    @JvmName("getCustomDueDate")
    fun getDueDate(): String? {
        return dueDate
    }

    @JvmName("setCustomDueDate")
    fun setDueDate(dueDate: String?) {
        this.dueDate = dueDate
    }

    @JvmName("getCustomDeleteButton")
    fun getDeleteButton(): Button? {
        return deleteButton
    }

    @JvmName("setCustomDeleteButton")
    fun setDeleteButton(deleteButton: Button?) {
        this.deleteButton = deleteButton
    }
}


// Add a task file //

// Updating a task //

package com.example.task_manager_app_41p

import android.app.Dialog
import android.content.Context
import android.os.Build
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.recyclerview.widget.RecyclerView

class AddTaskAdapter(
    private val context: Context,
    private val taskList: MutableList<Addanewtask> = mutableListOf(),
    private val mainActivity: MainActivity
) : RecyclerView.Adapter<AddTaskAdapter.TaskViewHolder>() {

    private val database = Database(context)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {
        val view = LayoutInflater.from(context).inflate(R.layout.task_view, parent, false)
        return TaskViewHolder(view)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onBindViewHolder(holder: TaskViewHolder, position: Int) {
        val currentTask = taskList[position]

        holder.idTextView.text = "ID: ${currentTask.taskId}"
        holder.titleTextView.text = currentTask.taskTitle
        holder.descriptionTextView.text = currentTask.taskDescription
        holder.dueDateTextView.text = currentTask.dueDate

        holder.itemView.setOnClickListener {
            try {
                val dialog = Dialog(holder.itemView.context.applicationContext)
                dialog.window?.setBackgroundDrawableResource(android.R.color.black)
                dialog.window?.setType(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY)
                dialog.setContentView(R.layout.update_task_view)

                val editId = dialog.findViewById<TextView>(R.id.edit_id)
                val editTitle = dialog.findViewById<EditText>(R.id.edit_title)
                val editDesc = dialog.findViewById<EditText>(R.id.edit_desc)
                val editDate = dialog.findViewById<EditText>(R.id.edit_date)

                dialog.setCancelable(true)
                editId.text = "ID: ${currentTask.taskId}"
                editTitle.setText(currentTask.taskTitle)
                editDesc.setText(currentTask.taskDescription)
                editDate.setText(currentTask.dueDate)

                dialog.show()

                val updateButton = dialog.findViewById<Button>(R.id.update_button)
                updateButton.setOnClickListener {
                    val taskId = currentTask.taskId ?: ""

                    val isUpdated = database.updateTask(
                        taskId,
                        editTitle.text.toString(),
                        editDesc.text.toString(),
                        editDate.text.toString()
                    )
                    if (isUpdated) {
                        mainActivity.refreshRecyclerView()
                        dialog.dismiss()
                    } else {
                        Toast.makeText(context, "Failed to update task", Toast.LENGTH_SHORT).show()
                    }
                }

                val cancelButton = dialog.findViewById<Button>(R.id.cancel_button)
                cancelButton.setOnClickListener {
                    dialog.dismiss() // Close the dialog when Cancel is clicked
                }

            } catch (e: Exception) {
                Log.e("error", e.toString())
            }
        }

        holder.deleteButton.setOnClickListener {
            val taskId = currentTask.taskId ?: ""
            val isDeleted = database.deleteTask(taskId)

            if (isDeleted) {
                val adapterPosition = holder.adapterPosition
                if (adapterPosition != RecyclerView.NO_POSITION) {
                    taskList.removeAt(adapterPosition)
                    notifyItemRemoved(adapterPosition)
                    notifyItemRangeChanged(adapterPosition, taskList.size)

                    Toast.makeText(context, "Task deleted successfully", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(context, "Invalid position", Toast.LENGTH_SHORT).show()
                }
            } else {
                Toast.makeText(context, "Failed to delete task", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun getItemCount(): Int {
        return taskList.size
    }

    class TaskViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val idTextView: TextView = itemView.findViewById(R.id.task_id)
        val titleTextView: TextView = itemView.findViewById(R.id.task_title)
        val descriptionTextView: TextView = itemView.findViewById(R.id.description)
        val dueDateTextView: TextView = itemView.findViewById(R.id.due_date)
        val deleteButton: Button = itemView.findViewById(R.id.delete_button)
    }
}


// Updating a task //